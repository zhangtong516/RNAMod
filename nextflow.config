// Global default params
params {
    genome = "/home/users/astar/gis/zhangt/scratch/reference/mm39/STAR_v2.7.10a/"  //"mm39"
    gtf = "/home/users/astar/gis/zhangt/scratch/reference/mm39/mm39.ncbiRefSeq.gtf"
    outdir = "${projectDir}/results"
    cacheDir = "${projectDir}/singularity_images/"
    max_memory = 128.GB
    max_cpus = 32
    max_time = 48.h
}

// Process-specific configuration
process {
    // General process configuration
    executor = 'slurm'
    clusterOptions = { ' -V --partition=normal ' }  // Remove account specification or update with your actual account
    // clusterOptions = "-l mem_free=${memory.toString().replaceAll(/[\sB]/,'')}"
    penv = 'OpenMP'
    // errorStrategy = { task.attempt < 2 ? 'retry' : 'finish' }
    pollInterval = '30 sec'
    exitReadTimeout = "120 sec"

    cpus = 1
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in [140,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    withName: 'FASTP' {
        cpus = 8
        memory = '16 GB'
        // container = 'https://depot.galaxyproject.org/singularity/fastp:0.23.2--h79da9fb_0'
        container = "${params.cacheDir}/fastp.sif"
    }

    withName: 'STAR_ALIGN' {
        cpus = 12
        memory = '32 GB'
        // container = 'https://depot.galaxyproject.org/singularity/star:2.7.10a--h9ee0642_0'
        container = "${params.cacheDir}/star.sif"
    }

    withName: 'BAM_COVERAGE' {
        cpus = 8
        memory = '24 GB'
        // container = 'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0'
        container = "${params.cacheDir}/deptools.sif"
    }

    withName: 'FEATURE_COUNTS' {
        cpus = 8
        memory = '16 GB'
        // container = 'https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0'
        container = "${params.cacheDir}/subread.sif"
    }
    
    withName: 'COLLECT_QC_METRICS' {
        cpus = 4
        memory = '8 GB'
        // container = 'https://depot.galaxyproject.org/singularity/python:3.9--1'
        
    }
    
    withName: 'MACS2_PEAK_CALLING' {
        cpus = 8
        memory = '16 GB'
        // container = 'https://depot.galaxyproject.org/singularity/macs2:2.2.9.1--py39hff71179_1 '
        container = "${params.cacheDir}/macs2.sif"
    }
    
    withName: 'PEAK_ANNOTATION' {
        cpus = 4
        memory = '16 GB'
        // container = 'docker://bioconductor/bioconductor_docker:RELEASE_3_16'
        // container = "${params.cacheDir}/bioconductor.sif"
    }
    
    withName: 'CALCULATE_SIZE_FACTORS' {
        // container = 'https://depot.galaxyproject.org/singularity/bioconductor-edger:4.4.0--r44h3df3fcb_0'
        container = "${params.cacheDir}/edger.sif"
    }
    
    withName: 'INSERT_SIZE_METRICS' {
        cpus = 2
        memory = '16 GB'
        // container = 'https://depot.galaxyproject.org/singularity/picard:2.27.4--hdfd78af_0'
        container = "${params.cacheDir}/picard.sif"
    }
}
// Enable Singularity
singularity {
    enabled = true
    autoMounts = true
    cacheDir = params.cacheDir
}


// Execution reports
report {
    enabled = true
    overwrite = true 
    file = "${params.outdir}/execution_report.html"
}

timeline {
    enabled = true
    overwrite = true 
    file = "${params.outdir}/timeline_report.html"
}

trace {
    enabled = true
    overwrite = true 
    file = "${params.outdir}/trace.txt"
}

// Profiles
profiles {
    standard {
        process.executor = 'slurm'
        process.queue = 'normal'
        // Remove or update account with your actual SLURM account
        process.clusterOptions = '--partition=normal'
        process.maxCpus = 32
        process.maxMemory = '128 GB'
    }
    
    // Remove docker profile as we're using Singularity
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }
    
    conda {
        conda.enabled = true
        singularity.enabled = false
    }
}

// Manifest
manifest {
    name = 'RNA Methylation Analysis Pipeline'
    author = 'Your Name'
    description = 'Nextflow pipeline for RNA methylation analysis'
    version = '0.1.13.0000'
    nextflowVersion = '>=21.04.0'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}